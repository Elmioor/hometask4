# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия. Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

# from sys import argv
#
#
# def calculate_sallary(work_hours, sallary_per_hour, reward):
#     result_sallary =  (work_hours*sallary_per_hour) + reward
#     return result_sallary
#     #print(result_sallary)
#
# try:
#     file, work_hours, sallary_per_hour, reward = argv
#     print(calculate_sallary(int(work_hours), int(sallary_per_hour), int(reward)))
# except ValueError:
#     print("args problems")
#     exit()


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
#

# base_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
# new_list1 = []
# new_list1 = [base_list[base_list.index(eli)] for eli in base_list if eli > base_list[base_list.index(eli)-1]]
#
# print(f"Исходный список: {base_list}")
# print(f"Новый список: {new_list1}")


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.
#
#
# result = [number for number in range(20,240) if number %20 == 0 or number %21==0]
# print(result)


# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
#
#
# old_list_4 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# new_list_4 = []
# new_list_4 = [eli for eli in old_list_4 if old_list_4.count(eli)==1]
#
# print(new_list_4)





# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().
#
#
# from functools import reduce
#
#
# def funk_generate_numpers():
#     list_numbers = [number for number in range(100,1001) if number % 2 ==0]
#     return list_numbers
# print(funk_generate_numpers())
#
# def funk_mul(base, next_el):
#     result_mul = base * next_el
#     return result_mul
#
# print(reduce(funk_mul, funk_generate_numpers()))


# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
#
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
#
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
#
# from itertools import count
# from itertools import cycle
#
# # just generate
# # for el in count(7):
# #     print(el)
#
# list_iter_base = [1,2,3,4,5]
#
# с = 0
# for el in cycle(list_iter_base):
#     if с > len(list_iter_base*10):
#         break
#     print(el)
#     с += 1



# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fac(n):
    if n == 0:
        return 1
    return fac(n-1) * n


print(fac(5))

###

def generator():
    for el in (10, 20, 30):
        yield el

g = generator()
#print(g)



